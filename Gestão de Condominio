using System;
using System.Collections.Generic;
using System.Linq;

public class Condominio{
    public bool Pagamento { get; set; }
    public float VlrDespesas { get; set; }
    public float VlrCaixa { get; set; }
    
    public Condominio(bool pagamento, float gastos, float caixa){
        Pagamento = pagamento;
        VlrDespesas = gastos; // criando objeto para reter dados do condominio
        VlrCaixa = caixa;
    }
}

public class Moradores{
    public string Nome { get; set; } // criando objeto para reter dados dos moradores
    public string Telefone { get; set; }
    public string Apartamento { get; set; }
    public string Bloco { get; set; }
    
    public Moradores(string nome, string telefone, string apartamento, string bloco){
        Nome = nome;
        Telefone = telefone;
        Apartamento = apartamento;
        Bloco = bloco;
    }
}

class GestaoDeCondomino{
    static void Main(){
        List<Moradores> lstmoradores = new List<Moradores>(); // criando a lista com base nos objetos
        List<Condominio> lstcondominio = new List<Condominio>();

        while(true){
            Console.WriteLine("Para cadastrar um morador, selecione uma das opções abaixo: \n");
            Console.WriteLine("\n[1] Adicione um proprietário");
            Console.WriteLine("\n[2] Exibir lista de proprietários");
            Console.WriteLine("\n[3] Pesquisar um proprietário");
            Console.WriteLine("\n[4] Remover proprietário");
            Console.WriteLine("\n[5] Sair");
            
            string opcao = Console.ReadLine();
            
            switch (opcao){
                case "1": // switch case com as opções do usuário
                    Console.Write("Digite o nome do proprietário: ");
                    string nome = Console.ReadLine();
                    
                    Console.Write("\nDigite o telefone do proprietário: ");
                    string telefone = Console.ReadLine();
                    
                    Console.Write("\nDigite o apartamento do proprietário: ");
                    string apartamento = Console.ReadLine();
                    
                    Console.Write("\nDigite o bloco do proprietário: ");
                    string bloco = Console.ReadLine();
                    
                    lstmoradores.Add(new Moradores(nome, telefone, apartamento, bloco)); // Adicionando os dados na lista criada
                    Console.WriteLine($"Morador {nome} adicionado com sucesso!");
                    break;
                
                case "2":
                    Console.WriteLine("Lista de moradores: ");
                    
                    if (lstmoradores.Count == 0){
                        Console.WriteLine("Nenhum morador encontrado!");
                    }
                    else{
                        foreach (Moradores morador in lstmoradores){
                            Console.WriteLine($"Nome: {morador.Nome}\nTelefone: {morador.Telefone}\nApartamento: {morador.Apartamento} {morador.Bloco}");
                            
                            Console.WriteLine("Deseja ")
                        }
                    }
                    break;
                
                case "3":
                    Console.Write("A pesquisa será feita por [Nome] [Telefone] [Apartamento e Bloco]: ");
                    string pesquisa = Console.ReadLine().ToLower();
                    
                    Console.Write("Digite o termo de busca: ");
                    string opcaoPesquisa = Console.ReadLine().ToLower();
                    
                    List<Moradores> resultadoPesquisa = new List<Moradores>();
                    
                    if (pesquisa == "nome"){
                        resultadoPesquisa = lstmoradores.Where(m => m.Nome.ToLower().Contains(opcaoPesquisa)).ToList();
                    }
                    else if (pesquisa == "telefone"){
                        resultadoPesquisa = lstmoradores.Where(m => m.Telefone.ToLower().Contains(opcaoPesquisa)).ToList();
                    }
                    else if (pesquisa == "apartamento e bloco"){
                        resultadoPesquisa = lstmoradores.Where(m => m.Apartamento.ToLower().Contains(opcaoPesquisa) || m.Bloco.ToLower().Contains(opcaoPesquisa)).ToList();
                    }
                    
                    if (resultadoPesquisa.Count == 0){
                        Console.WriteLine("Nenhum resultado encontrado!");
                    }
                    else{
                        foreach (var morador in resultadoPesquisa){
                            Console.WriteLine($"Nome: {morador.Nome}\nTelefone: {morador.Telefone}\nApartamento: {morador.Apartamento} {morador.Bloco}");
                        }
                    }
                    break;
                
                case "4":
                    Console.Write("Digite o nome do proprietário a ser removido: ");
                    string nomeRemover = Console.ReadLine().ToLower();
                    Moradores moradorRemover = lstmoradores.FirstOrDefault(m => m.Nome.ToLower() == nomeRemover);
                    
                    if (moradorRemover != null){
                        lstmoradores.Remove(moradorRemover);
                        Console.WriteLine($"Morador {moradorRemover.Nome} removido com sucesso!");
                    }
                    else{
                        Console.WriteLine("Morador não encontrado!");
                    }
                    break;
                
                case "5":
                    Console.WriteLine("Saindo do sistema...");
                    return;
                
                default:
                    Console.WriteLine("Opção inválida! Tente novamente.");
                    break;
            }
        }
    }
}
